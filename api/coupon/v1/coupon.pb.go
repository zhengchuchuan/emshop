// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: coupon.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ========== 优惠券模板相关 ==========
type CreateCouponTemplateRequest struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Name              string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                        // 优惠券名称
	Type              int32                  `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`                                                       // 优惠券类型
	DiscountType      int32                  `protobuf:"varint,3,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"`                   // 折扣类型
	DiscountValue     float64                `protobuf:"fixed64,4,opt,name=discount_value,json=discountValue,proto3" json:"discount_value,omitempty"`               // 折扣值
	MinOrderAmount    float64                `protobuf:"fixed64,5,opt,name=min_order_amount,json=minOrderAmount,proto3" json:"min_order_amount,omitempty"`          // 最小订单金额
	MaxDiscountAmount float64                `protobuf:"fixed64,6,opt,name=max_discount_amount,json=maxDiscountAmount,proto3" json:"max_discount_amount,omitempty"` // 最大折扣金额
	TotalCount        int32                  `protobuf:"varint,7,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`                         // 总发放数量
	PerUserLimit      int32                  `protobuf:"varint,8,opt,name=per_user_limit,json=perUserLimit,proto3" json:"per_user_limit,omitempty"`                 // 每用户限领数量
	ValidStartTime    int64                  `protobuf:"varint,9,opt,name=valid_start_time,json=validStartTime,proto3" json:"valid_start_time,omitempty"`           // 有效期开始时间
	ValidEndTime      int64                  `protobuf:"varint,10,opt,name=valid_end_time,json=validEndTime,proto3" json:"valid_end_time,omitempty"`                // 有效期结束时间
	ValidDays         int32                  `protobuf:"varint,11,opt,name=valid_days,json=validDays,proto3" json:"valid_days,omitempty"`                           // 有效天数
	Description       string                 `protobuf:"bytes,12,opt,name=description,proto3" json:"description,omitempty"`                                         // 使用说明
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CreateCouponTemplateRequest) Reset() {
	*x = CreateCouponTemplateRequest{}
	mi := &file_coupon_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCouponTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCouponTemplateRequest) ProtoMessage() {}

func (x *CreateCouponTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCouponTemplateRequest.ProtoReflect.Descriptor instead.
func (*CreateCouponTemplateRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{0}
}

func (x *CreateCouponTemplateRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCouponTemplateRequest) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetDiscountValue() float64 {
	if x != nil {
		return x.DiscountValue
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetMinOrderAmount() float64 {
	if x != nil {
		return x.MinOrderAmount
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetMaxDiscountAmount() float64 {
	if x != nil {
		return x.MaxDiscountAmount
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetPerUserLimit() int32 {
	if x != nil {
		return x.PerUserLimit
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetValidStartTime() int64 {
	if x != nil {
		return x.ValidStartTime
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetValidEndTime() int64 {
	if x != nil {
		return x.ValidEndTime
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetValidDays() int32 {
	if x != nil {
		return x.ValidDays
	}
	return 0
}

func (x *CreateCouponTemplateRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type UpdateCouponTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                        // 模板ID
	Name          *string                `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`               // 优惠券名称
	Status        *int32                 `protobuf:"varint,3,opt,name=status,proto3,oneof" json:"status,omitempty"`          // 状态
	Description   *string                `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"` // 使用说明
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateCouponTemplateRequest) Reset() {
	*x = UpdateCouponTemplateRequest{}
	mi := &file_coupon_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateCouponTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCouponTemplateRequest) ProtoMessage() {}

func (x *UpdateCouponTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCouponTemplateRequest.ProtoReflect.Descriptor instead.
func (*UpdateCouponTemplateRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{1}
}

func (x *UpdateCouponTemplateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpdateCouponTemplateRequest) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *UpdateCouponTemplateRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *UpdateCouponTemplateRequest) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

type GetCouponTemplateRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 模板ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCouponTemplateRequest) Reset() {
	*x = GetCouponTemplateRequest{}
	mi := &file_coupon_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCouponTemplateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCouponTemplateRequest) ProtoMessage() {}

func (x *GetCouponTemplateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCouponTemplateRequest.ProtoReflect.Descriptor instead.
func (*GetCouponTemplateRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{2}
}

func (x *GetCouponTemplateRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListCouponTemplatesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *int32                 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"`               // 状态筛选
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCouponTemplatesRequest) Reset() {
	*x = ListCouponTemplatesRequest{}
	mi := &file_coupon_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCouponTemplatesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCouponTemplatesRequest) ProtoMessage() {}

func (x *ListCouponTemplatesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCouponTemplatesRequest.ProtoReflect.Descriptor instead.
func (*ListCouponTemplatesRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{3}
}

func (x *ListCouponTemplatesRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListCouponTemplatesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListCouponTemplatesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type CouponTemplateResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Id                int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                           // 模板ID
	Name              string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                        // 优惠券名称
	Type              int32                  `protobuf:"varint,3,opt,name=type,proto3" json:"type,omitempty"`                                                       // 优惠券类型
	DiscountType      int32                  `protobuf:"varint,4,opt,name=discount_type,json=discountType,proto3" json:"discount_type,omitempty"`                   // 折扣类型
	DiscountValue     float64                `protobuf:"fixed64,5,opt,name=discount_value,json=discountValue,proto3" json:"discount_value,omitempty"`               // 折扣值
	MinOrderAmount    float64                `protobuf:"fixed64,6,opt,name=min_order_amount,json=minOrderAmount,proto3" json:"min_order_amount,omitempty"`          // 最小订单金额
	MaxDiscountAmount float64                `protobuf:"fixed64,7,opt,name=max_discount_amount,json=maxDiscountAmount,proto3" json:"max_discount_amount,omitempty"` // 最大折扣金额
	TotalCount        int32                  `protobuf:"varint,8,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`                         // 总发放数量
	UsedCount         int32                  `protobuf:"varint,9,opt,name=used_count,json=usedCount,proto3" json:"used_count,omitempty"`                            // 已使用数量
	PerUserLimit      int32                  `protobuf:"varint,10,opt,name=per_user_limit,json=perUserLimit,proto3" json:"per_user_limit,omitempty"`                // 每用户限领数量
	ValidStartTime    int64                  `protobuf:"varint,11,opt,name=valid_start_time,json=validStartTime,proto3" json:"valid_start_time,omitempty"`          // 有效期开始时间
	ValidEndTime      int64                  `protobuf:"varint,12,opt,name=valid_end_time,json=validEndTime,proto3" json:"valid_end_time,omitempty"`                // 有效期结束时间
	ValidDays         int32                  `protobuf:"varint,13,opt,name=valid_days,json=validDays,proto3" json:"valid_days,omitempty"`                           // 有效天数
	Status            int32                  `protobuf:"varint,14,opt,name=status,proto3" json:"status,omitempty"`                                                  // 状态
	Description       string                 `protobuf:"bytes,15,opt,name=description,proto3" json:"description,omitempty"`                                         // 使用说明
	CreatedAt         int64                  `protobuf:"varint,16,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                           // 创建时间
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *CouponTemplateResponse) Reset() {
	*x = CouponTemplateResponse{}
	mi := &file_coupon_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponTemplateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponTemplateResponse) ProtoMessage() {}

func (x *CouponTemplateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponTemplateResponse.ProtoReflect.Descriptor instead.
func (*CouponTemplateResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{4}
}

func (x *CouponTemplateResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CouponTemplateResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CouponTemplateResponse) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *CouponTemplateResponse) GetDiscountType() int32 {
	if x != nil {
		return x.DiscountType
	}
	return 0
}

func (x *CouponTemplateResponse) GetDiscountValue() float64 {
	if x != nil {
		return x.DiscountValue
	}
	return 0
}

func (x *CouponTemplateResponse) GetMinOrderAmount() float64 {
	if x != nil {
		return x.MinOrderAmount
	}
	return 0
}

func (x *CouponTemplateResponse) GetMaxDiscountAmount() float64 {
	if x != nil {
		return x.MaxDiscountAmount
	}
	return 0
}

func (x *CouponTemplateResponse) GetTotalCount() int32 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *CouponTemplateResponse) GetUsedCount() int32 {
	if x != nil {
		return x.UsedCount
	}
	return 0
}

func (x *CouponTemplateResponse) GetPerUserLimit() int32 {
	if x != nil {
		return x.PerUserLimit
	}
	return 0
}

func (x *CouponTemplateResponse) GetValidStartTime() int64 {
	if x != nil {
		return x.ValidStartTime
	}
	return 0
}

func (x *CouponTemplateResponse) GetValidEndTime() int64 {
	if x != nil {
		return x.ValidEndTime
	}
	return 0
}

func (x *CouponTemplateResponse) GetValidDays() int32 {
	if x != nil {
		return x.ValidDays
	}
	return 0
}

func (x *CouponTemplateResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CouponTemplateResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CouponTemplateResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ListCouponTemplatesResponse struct {
	state         protoimpl.MessageState    `protogen:"open.v1"`
	TotalCount    int64                     `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	Items         []*CouponTemplateResponse `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 模板列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListCouponTemplatesResponse) Reset() {
	*x = ListCouponTemplatesResponse{}
	mi := &file_coupon_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListCouponTemplatesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListCouponTemplatesResponse) ProtoMessage() {}

func (x *ListCouponTemplatesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListCouponTemplatesResponse.ProtoReflect.Descriptor instead.
func (*ListCouponTemplatesResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{5}
}

func (x *ListCouponTemplatesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListCouponTemplatesResponse) GetItems() []*CouponTemplateResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

// ========== 用户优惠券相关 ==========
type ReceiveCouponRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	UserId           int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	CouponTemplateId int64                  `protobuf:"varint,2,opt,name=coupon_template_id,json=couponTemplateId,proto3" json:"coupon_template_id,omitempty"` // 优惠券模板ID
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *ReceiveCouponRequest) Reset() {
	*x = ReceiveCouponRequest{}
	mi := &file_coupon_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReceiveCouponRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReceiveCouponRequest) ProtoMessage() {}

func (x *ReceiveCouponRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReceiveCouponRequest.ProtoReflect.Descriptor instead.
func (*ReceiveCouponRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{6}
}

func (x *ReceiveCouponRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ReceiveCouponRequest) GetCouponTemplateId() int64 {
	if x != nil {
		return x.CouponTemplateId
	}
	return 0
}

type GetUserCouponsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`       // 用户ID
	Status        *int32                 `protobuf:"varint,2,opt,name=status,proto3,oneof" json:"status,omitempty"`               // 状态筛选
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserCouponsRequest) Reset() {
	*x = GetUserCouponsRequest{}
	mi := &file_coupon_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserCouponsRequest) ProtoMessage() {}

func (x *GetUserCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserCouponsRequest.ProtoReflect.Descriptor instead.
func (*GetUserCouponsRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{7}
}

func (x *GetUserCouponsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserCouponsRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *GetUserCouponsRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserCouponsRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetAvailableCouponsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 // 用户ID
	OrderAmount   float64                `protobuf:"fixed64,2,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"` // 订单金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAvailableCouponsRequest) Reset() {
	*x = GetAvailableCouponsRequest{}
	mi := &file_coupon_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAvailableCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAvailableCouponsRequest) ProtoMessage() {}

func (x *GetAvailableCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAvailableCouponsRequest.ProtoReflect.Descriptor instead.
func (*GetAvailableCouponsRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{8}
}

func (x *GetAvailableCouponsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetAvailableCouponsRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

type UserCouponResponse struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Id               int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // 用户优惠券ID
	CouponTemplateId int64                   `protobuf:"varint,2,opt,name=coupon_template_id,json=couponTemplateId,proto3" json:"coupon_template_id,omitempty"` // 模板ID
	UserId           int64                   `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                 // 用户ID
	CouponCode       string                  `protobuf:"bytes,4,opt,name=coupon_code,json=couponCode,proto3" json:"coupon_code,omitempty"`                      // 优惠券码
	Status           int32                   `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                               // 状态
	OrderSn          *string                 `protobuf:"bytes,6,opt,name=order_sn,json=orderSn,proto3,oneof" json:"order_sn,omitempty"`                         // 使用的订单号
	ReceivedAt       int64                   `protobuf:"varint,7,opt,name=received_at,json=receivedAt,proto3" json:"received_at,omitempty"`                     // 领取时间
	UsedAt           *int64                  `protobuf:"varint,8,opt,name=used_at,json=usedAt,proto3,oneof" json:"used_at,omitempty"`                           // 使用时间
	ExpiredAt        int64                   `protobuf:"varint,9,opt,name=expired_at,json=expiredAt,proto3" json:"expired_at,omitempty"`                        // 过期时间
	Template         *CouponTemplateResponse `protobuf:"bytes,10,opt,name=template,proto3" json:"template,omitempty"`                                           // 关联的模板信息
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *UserCouponResponse) Reset() {
	*x = UserCouponResponse{}
	mi := &file_coupon_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserCouponResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCouponResponse) ProtoMessage() {}

func (x *UserCouponResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCouponResponse.ProtoReflect.Descriptor instead.
func (*UserCouponResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{9}
}

func (x *UserCouponResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UserCouponResponse) GetCouponTemplateId() int64 {
	if x != nil {
		return x.CouponTemplateId
	}
	return 0
}

func (x *UserCouponResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UserCouponResponse) GetCouponCode() string {
	if x != nil {
		return x.CouponCode
	}
	return ""
}

func (x *UserCouponResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *UserCouponResponse) GetOrderSn() string {
	if x != nil && x.OrderSn != nil {
		return *x.OrderSn
	}
	return ""
}

func (x *UserCouponResponse) GetReceivedAt() int64 {
	if x != nil {
		return x.ReceivedAt
	}
	return 0
}

func (x *UserCouponResponse) GetUsedAt() int64 {
	if x != nil && x.UsedAt != nil {
		return *x.UsedAt
	}
	return 0
}

func (x *UserCouponResponse) GetExpiredAt() int64 {
	if x != nil {
		return x.ExpiredAt
	}
	return 0
}

func (x *UserCouponResponse) GetTemplate() *CouponTemplateResponse {
	if x != nil {
		return x.Template
	}
	return nil
}

type ListUserCouponsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalCount    int64                  `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	Items         []*UserCouponResponse  `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 用户优惠券列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserCouponsResponse) Reset() {
	*x = ListUserCouponsResponse{}
	mi := &file_coupon_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserCouponsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserCouponsResponse) ProtoMessage() {}

func (x *ListUserCouponsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserCouponsResponse.ProtoReflect.Descriptor instead.
func (*ListUserCouponsResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{10}
}

func (x *ListUserCouponsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListUserCouponsResponse) GetItems() []*UserCouponResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

// ========== 优惠券计算和使用 ==========
type CalculateCouponDiscountRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 // 用户ID
	CouponIds     []int64                `protobuf:"varint,2,rep,packed,name=coupon_ids,json=couponIds,proto3" json:"coupon_ids,omitempty"` // 要使用的优惠券ID列表
	OrderAmount   float64                `protobuf:"fixed64,3,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"` // 订单原始金额
	OrderItems    []*CouponOrderItem     `protobuf:"bytes,4,rep,name=order_items,json=orderItems,proto3" json:"order_items,omitempty"`      // 订单商品明细
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CalculateCouponDiscountRequest) Reset() {
	*x = CalculateCouponDiscountRequest{}
	mi := &file_coupon_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateCouponDiscountRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCouponDiscountRequest) ProtoMessage() {}

func (x *CalculateCouponDiscountRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCouponDiscountRequest.ProtoReflect.Descriptor instead.
func (*CalculateCouponDiscountRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{11}
}

func (x *CalculateCouponDiscountRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CalculateCouponDiscountRequest) GetCouponIds() []int64 {
	if x != nil {
		return x.CouponIds
	}
	return nil
}

func (x *CalculateCouponDiscountRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

func (x *CalculateCouponDiscountRequest) GetOrderItems() []*CouponOrderItem {
	if x != nil {
		return x.OrderItems
	}
	return nil
}

type CouponOrderItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodsId       int64                  `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"` // 商品ID
	Quantity      int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`              // 数量
	Price         float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`                   // 单价
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponOrderItem) Reset() {
	*x = CouponOrderItem{}
	mi := &file_coupon_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponOrderItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponOrderItem) ProtoMessage() {}

func (x *CouponOrderItem) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponOrderItem.ProtoReflect.Descriptor instead.
func (*CouponOrderItem) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{12}
}

func (x *CouponOrderItem) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *CouponOrderItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *CouponOrderItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

type CalculateCouponDiscountResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	OriginalAmount  float64                `protobuf:"fixed64,1,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"`       // 原始金额
	DiscountAmount  float64                `protobuf:"fixed64,2,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"`       // 优惠金额
	FinalAmount     float64                `protobuf:"fixed64,3,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount,omitempty"`                // 最终金额
	AppliedCoupons  []int64                `protobuf:"varint,4,rep,packed,name=applied_coupons,json=appliedCoupons,proto3" json:"applied_coupons,omitempty"` // 已应用的优惠券ID
	RejectedCoupons []*CouponRejection     `protobuf:"bytes,5,rep,name=rejected_coupons,json=rejectedCoupons,proto3" json:"rejected_coupons,omitempty"`      // 被拒绝的优惠券
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *CalculateCouponDiscountResponse) Reset() {
	*x = CalculateCouponDiscountResponse{}
	mi := &file_coupon_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CalculateCouponDiscountResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalculateCouponDiscountResponse) ProtoMessage() {}

func (x *CalculateCouponDiscountResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalculateCouponDiscountResponse.ProtoReflect.Descriptor instead.
func (*CalculateCouponDiscountResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{13}
}

func (x *CalculateCouponDiscountResponse) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *CalculateCouponDiscountResponse) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *CalculateCouponDiscountResponse) GetFinalAmount() float64 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *CalculateCouponDiscountResponse) GetAppliedCoupons() []int64 {
	if x != nil {
		return x.AppliedCoupons
	}
	return nil
}

func (x *CalculateCouponDiscountResponse) GetRejectedCoupons() []*CouponRejection {
	if x != nil {
		return x.RejectedCoupons
	}
	return nil
}

type CouponRejection struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CouponId      int64                  `protobuf:"varint,1,opt,name=coupon_id,json=couponId,proto3" json:"coupon_id,omitempty"` // 优惠券ID
	Reason        string                 `protobuf:"bytes,2,opt,name=reason,proto3" json:"reason,omitempty"`                      // 拒绝原因
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CouponRejection) Reset() {
	*x = CouponRejection{}
	mi := &file_coupon_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CouponRejection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponRejection) ProtoMessage() {}

func (x *CouponRejection) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponRejection.ProtoReflect.Descriptor instead.
func (*CouponRejection) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{14}
}

func (x *CouponRejection) GetCouponId() int64 {
	if x != nil {
		return x.CouponId
	}
	return 0
}

func (x *CouponRejection) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type UseCouponsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                 // 用户ID
	OrderSn       string                 `protobuf:"bytes,2,opt,name=order_sn,json=orderSn,proto3" json:"order_sn,omitempty"`               // 订单号
	CouponIds     []int64                `protobuf:"varint,3,rep,packed,name=coupon_ids,json=couponIds,proto3" json:"coupon_ids,omitempty"` // 要使用的优惠券ID列表
	OrderAmount   float64                `protobuf:"fixed64,4,opt,name=order_amount,json=orderAmount,proto3" json:"order_amount,omitempty"` // 订单金额
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseCouponsRequest) Reset() {
	*x = UseCouponsRequest{}
	mi := &file_coupon_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCouponsRequest) ProtoMessage() {}

func (x *UseCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCouponsRequest.ProtoReflect.Descriptor instead.
func (*UseCouponsRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{15}
}

func (x *UseCouponsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UseCouponsRequest) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

func (x *UseCouponsRequest) GetCouponIds() []int64 {
	if x != nil {
		return x.CouponIds
	}
	return nil
}

func (x *UseCouponsRequest) GetOrderAmount() float64 {
	if x != nil {
		return x.OrderAmount
	}
	return 0
}

type UseCouponsResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	DiscountAmount float64                `protobuf:"fixed64,1,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` // 优惠金额
	UsedCoupons    []int64                `protobuf:"varint,2,rep,packed,name=used_coupons,json=usedCoupons,proto3" json:"used_coupons,omitempty"`    // 已使用的优惠券ID
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *UseCouponsResponse) Reset() {
	*x = UseCouponsResponse{}
	mi := &file_coupon_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseCouponsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseCouponsResponse) ProtoMessage() {}

func (x *UseCouponsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseCouponsResponse.ProtoReflect.Descriptor instead.
func (*UseCouponsResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{16}
}

func (x *UseCouponsResponse) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *UseCouponsResponse) GetUsedCoupons() []int64 {
	if x != nil {
		return x.UsedCoupons
	}
	return nil
}

type ReleaseCouponsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OrderSn       string                 `protobuf:"bytes,1,opt,name=order_sn,json=orderSn,proto3" json:"order_sn,omitempty"` // 订单号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReleaseCouponsRequest) Reset() {
	*x = ReleaseCouponsRequest{}
	mi := &file_coupon_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReleaseCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseCouponsRequest) ProtoMessage() {}

func (x *ReleaseCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseCouponsRequest.ProtoReflect.Descriptor instead.
func (*ReleaseCouponsRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{17}
}

func (x *ReleaseCouponsRequest) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

// ========== 秒杀活动相关 ==========
type CreateFlashSaleActivityRequest struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	CouponTemplateId int64                  `protobuf:"varint,1,opt,name=coupon_template_id,json=couponTemplateId,proto3" json:"coupon_template_id,omitempty"` // 关联的优惠券模板ID
	Name             string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                    // 秒杀活动名称
	StartTime        int64                  `protobuf:"varint,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                        // 秒杀开始时间
	EndTime          int64                  `protobuf:"varint,4,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                              // 秒杀结束时间
	FlashSaleCount   int32                  `protobuf:"varint,5,opt,name=flash_sale_count,json=flashSaleCount,proto3" json:"flash_sale_count,omitempty"`       // 秒杀数量
	PerUserLimit     int32                  `protobuf:"varint,6,opt,name=per_user_limit,json=perUserLimit,proto3" json:"per_user_limit,omitempty"`             // 每用户限抢数量
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateFlashSaleActivityRequest) Reset() {
	*x = CreateFlashSaleActivityRequest{}
	mi := &file_coupon_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFlashSaleActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFlashSaleActivityRequest) ProtoMessage() {}

func (x *CreateFlashSaleActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFlashSaleActivityRequest.ProtoReflect.Descriptor instead.
func (*CreateFlashSaleActivityRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{18}
}

func (x *CreateFlashSaleActivityRequest) GetCouponTemplateId() int64 {
	if x != nil {
		return x.CouponTemplateId
	}
	return 0
}

func (x *CreateFlashSaleActivityRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFlashSaleActivityRequest) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *CreateFlashSaleActivityRequest) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *CreateFlashSaleActivityRequest) GetFlashSaleCount() int32 {
	if x != nil {
		return x.FlashSaleCount
	}
	return 0
}

func (x *CreateFlashSaleActivityRequest) GetPerUserLimit() int32 {
	if x != nil {
		return x.PerUserLimit
	}
	return 0
}

type GetFlashSaleActivityRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            int64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // 秒杀活动ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlashSaleActivityRequest) Reset() {
	*x = GetFlashSaleActivityRequest{}
	mi := &file_coupon_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlashSaleActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlashSaleActivityRequest) ProtoMessage() {}

func (x *GetFlashSaleActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlashSaleActivityRequest.ProtoReflect.Descriptor instead.
func (*GetFlashSaleActivityRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{19}
}

func (x *GetFlashSaleActivityRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ListFlashSaleActivitiesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        *int32                 `protobuf:"varint,1,opt,name=status,proto3,oneof" json:"status,omitempty"`               // 状态筛选
	Page          int32                  `protobuf:"varint,2,opt,name=page,proto3" json:"page,omitempty"`                         // 页码
	PageSize      int32                  `protobuf:"varint,3,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"` // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlashSaleActivitiesRequest) Reset() {
	*x = ListFlashSaleActivitiesRequest{}
	mi := &file_coupon_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlashSaleActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlashSaleActivitiesRequest) ProtoMessage() {}

func (x *ListFlashSaleActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlashSaleActivitiesRequest.ProtoReflect.Descriptor instead.
func (*ListFlashSaleActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{20}
}

func (x *ListFlashSaleActivitiesRequest) GetStatus() int32 {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return 0
}

func (x *ListFlashSaleActivitiesRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *ListFlashSaleActivitiesRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FlashSaleActivityResponse struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Id               int64                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                       // 秒杀活动ID
	CouponTemplateId int64                   `protobuf:"varint,2,opt,name=coupon_template_id,json=couponTemplateId,proto3" json:"coupon_template_id,omitempty"` // 关联的优惠券模板ID
	Name             string                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                                                    // 秒杀活动名称
	StartTime        int64                   `protobuf:"varint,4,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`                        // 秒杀开始时间
	EndTime          int64                   `protobuf:"varint,5,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`                              // 秒杀结束时间
	FlashSaleCount   int32                   `protobuf:"varint,6,opt,name=flash_sale_count,json=flashSaleCount,proto3" json:"flash_sale_count,omitempty"`       // 秒杀数量
	SoldCount        int32                   `protobuf:"varint,7,opt,name=sold_count,json=soldCount,proto3" json:"sold_count,omitempty"`                        // 已售数量
	PerUserLimit     int32                   `protobuf:"varint,8,opt,name=per_user_limit,json=perUserLimit,proto3" json:"per_user_limit,omitempty"`             // 每用户限抢数量
	Status           int32                   `protobuf:"varint,9,opt,name=status,proto3" json:"status,omitempty"`                                               // 状态
	Template         *CouponTemplateResponse `protobuf:"bytes,10,opt,name=template,proto3" json:"template,omitempty"`                                           // 关联的优惠券模板
	CreatedAt        int64                   `protobuf:"varint,11,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                       // 创建时间
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *FlashSaleActivityResponse) Reset() {
	*x = FlashSaleActivityResponse{}
	mi := &file_coupon_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlashSaleActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlashSaleActivityResponse) ProtoMessage() {}

func (x *FlashSaleActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlashSaleActivityResponse.ProtoReflect.Descriptor instead.
func (*FlashSaleActivityResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{21}
}

func (x *FlashSaleActivityResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetCouponTemplateId() int64 {
	if x != nil {
		return x.CouponTemplateId
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FlashSaleActivityResponse) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetFlashSaleCount() int32 {
	if x != nil {
		return x.FlashSaleCount
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetSoldCount() int32 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetPerUserLimit() int32 {
	if x != nil {
		return x.PerUserLimit
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FlashSaleActivityResponse) GetTemplate() *CouponTemplateResponse {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *FlashSaleActivityResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

type ListFlashSaleActivitiesResponse struct {
	state         protoimpl.MessageState       `protogen:"open.v1"`
	TotalCount    int64                        `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	Items         []*FlashSaleActivityResponse `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 秒杀活动列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlashSaleActivitiesResponse) Reset() {
	*x = ListFlashSaleActivitiesResponse{}
	mi := &file_coupon_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlashSaleActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlashSaleActivitiesResponse) ProtoMessage() {}

func (x *ListFlashSaleActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlashSaleActivitiesResponse.ProtoReflect.Descriptor instead.
func (*ListFlashSaleActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{22}
}

func (x *ListFlashSaleActivitiesResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListFlashSaleActivitiesResponse) GetItems() []*FlashSaleActivityResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

// ========== 秒杀参与相关 ==========
type ParticipateFlashSaleRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	FlashSaleId   int64                  `protobuf:"varint,2,opt,name=flash_sale_id,json=flashSaleId,proto3" json:"flash_sale_id,omitempty"` // 秒杀活动ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParticipateFlashSaleRequest) Reset() {
	*x = ParticipateFlashSaleRequest{}
	mi := &file_coupon_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipateFlashSaleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipateFlashSaleRequest) ProtoMessage() {}

func (x *ParticipateFlashSaleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipateFlashSaleRequest.ProtoReflect.Descriptor instead.
func (*ParticipateFlashSaleRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{23}
}

func (x *ParticipateFlashSaleRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ParticipateFlashSaleRequest) GetFlashSaleId() int64 {
	if x != nil {
		return x.FlashSaleId
	}
	return 0
}

type ParticipateFlashSaleResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Status        int32                  `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`                                         // 参与状态: 1-成功, 2-失败
	FailReason    *string                `protobuf:"bytes,2,opt,name=fail_reason,json=failReason,proto3,oneof" json:"fail_reason,omitempty"`          // 失败原因
	UserCouponId  *int64                 `protobuf:"varint,3,opt,name=user_coupon_id,json=userCouponId,proto3,oneof" json:"user_coupon_id,omitempty"` // 生成的用户优惠券ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ParticipateFlashSaleResponse) Reset() {
	*x = ParticipateFlashSaleResponse{}
	mi := &file_coupon_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipateFlashSaleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipateFlashSaleResponse) ProtoMessage() {}

func (x *ParticipateFlashSaleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipateFlashSaleResponse.ProtoReflect.Descriptor instead.
func (*ParticipateFlashSaleResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{24}
}

func (x *ParticipateFlashSaleResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ParticipateFlashSaleResponse) GetFailReason() string {
	if x != nil && x.FailReason != nil {
		return *x.FailReason
	}
	return ""
}

func (x *ParticipateFlashSaleResponse) GetUserCouponId() int64 {
	if x != nil && x.UserCouponId != nil {
		return *x.UserCouponId
	}
	return 0
}

type GetFlashSaleStockRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	FlashSaleId   int64                  `protobuf:"varint,1,opt,name=flash_sale_id,json=flashSaleId,proto3" json:"flash_sale_id,omitempty"` // 秒杀活动ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetFlashSaleStockRequest) Reset() {
	*x = GetFlashSaleStockRequest{}
	mi := &file_coupon_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFlashSaleStockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFlashSaleStockRequest) ProtoMessage() {}

func (x *GetFlashSaleStockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFlashSaleStockRequest.ProtoReflect.Descriptor instead.
func (*GetFlashSaleStockRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{25}
}

func (x *GetFlashSaleStockRequest) GetFlashSaleId() int64 {
	if x != nil {
		return x.FlashSaleId
	}
	return 0
}

type FlashSaleStockResponse struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FlashSaleId    int64                  `protobuf:"varint,1,opt,name=flash_sale_id,json=flashSaleId,proto3" json:"flash_sale_id,omitempty"`        // 秒杀活动ID
	TotalStock     int32                  `protobuf:"varint,2,opt,name=total_stock,json=totalStock,proto3" json:"total_stock,omitempty"`             // 总库存
	RemainingStock int32                  `protobuf:"varint,3,opt,name=remaining_stock,json=remainingStock,proto3" json:"remaining_stock,omitempty"` // 剩余库存
	SoldCount      int32                  `protobuf:"varint,4,opt,name=sold_count,json=soldCount,proto3" json:"sold_count,omitempty"`                // 已售数量
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FlashSaleStockResponse) Reset() {
	*x = FlashSaleStockResponse{}
	mi := &file_coupon_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlashSaleStockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlashSaleStockResponse) ProtoMessage() {}

func (x *FlashSaleStockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlashSaleStockResponse.ProtoReflect.Descriptor instead.
func (*FlashSaleStockResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{26}
}

func (x *FlashSaleStockResponse) GetFlashSaleId() int64 {
	if x != nil {
		return x.FlashSaleId
	}
	return 0
}

func (x *FlashSaleStockResponse) GetTotalStock() int32 {
	if x != nil {
		return x.TotalStock
	}
	return 0
}

func (x *FlashSaleStockResponse) GetRemainingStock() int32 {
	if x != nil {
		return x.RemainingStock
	}
	return 0
}

func (x *FlashSaleStockResponse) GetSoldCount() int32 {
	if x != nil {
		return x.SoldCount
	}
	return 0
}

type GetUserFlashSaleRecordRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                        // 用户ID
	FlashSaleId   *int64                 `protobuf:"varint,2,opt,name=flash_sale_id,json=flashSaleId,proto3,oneof" json:"flash_sale_id,omitempty"` // 秒杀活动ID(可选)
	Page          int32                  `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`                                          // 页码
	PageSize      int32                  `protobuf:"varint,4,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`                  // 页大小
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetUserFlashSaleRecordRequest) Reset() {
	*x = GetUserFlashSaleRecordRequest{}
	mi := &file_coupon_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetUserFlashSaleRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserFlashSaleRecordRequest) ProtoMessage() {}

func (x *GetUserFlashSaleRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserFlashSaleRecordRequest.ProtoReflect.Descriptor instead.
func (*GetUserFlashSaleRecordRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{27}
}

func (x *GetUserFlashSaleRecordRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GetUserFlashSaleRecordRequest) GetFlashSaleId() int64 {
	if x != nil && x.FlashSaleId != nil {
		return *x.FlashSaleId
	}
	return 0
}

func (x *GetUserFlashSaleRecordRequest) GetPage() int32 {
	if x != nil {
		return x.Page
	}
	return 0
}

func (x *GetUserFlashSaleRecordRequest) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type FlashSaleRecordResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Id            int64                      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                                 // 记录ID
	FlashSaleId   int64                      `protobuf:"varint,2,opt,name=flash_sale_id,json=flashSaleId,proto3" json:"flash_sale_id,omitempty"`          // 秒杀活动ID
	UserId        int64                      `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                           // 用户ID
	UserCouponId  *int64                     `protobuf:"varint,4,opt,name=user_coupon_id,json=userCouponId,proto3,oneof" json:"user_coupon_id,omitempty"` // 生成的用户优惠券ID
	Status        int32                      `protobuf:"varint,5,opt,name=status,proto3" json:"status,omitempty"`                                         // 状态
	FailReason    *string                    `protobuf:"bytes,6,opt,name=fail_reason,json=failReason,proto3,oneof" json:"fail_reason,omitempty"`          // 失败原因
	CreatedAt     int64                      `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`                  // 创建时间
	Activity      *FlashSaleActivityResponse `protobuf:"bytes,8,opt,name=activity,proto3" json:"activity,omitempty"`                                      // 关联的秒杀活动
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlashSaleRecordResponse) Reset() {
	*x = FlashSaleRecordResponse{}
	mi := &file_coupon_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlashSaleRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlashSaleRecordResponse) ProtoMessage() {}

func (x *FlashSaleRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlashSaleRecordResponse.ProtoReflect.Descriptor instead.
func (*FlashSaleRecordResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{28}
}

func (x *FlashSaleRecordResponse) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetFlashSaleId() int64 {
	if x != nil {
		return x.FlashSaleId
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetUserCouponId() int64 {
	if x != nil && x.UserCouponId != nil {
		return *x.UserCouponId
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetFailReason() string {
	if x != nil && x.FailReason != nil {
		return *x.FailReason
	}
	return ""
}

func (x *FlashSaleRecordResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *FlashSaleRecordResponse) GetActivity() *FlashSaleActivityResponse {
	if x != nil {
		return x.Activity
	}
	return nil
}

type ListFlashSaleRecordsResponse struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	TotalCount    int64                      `protobuf:"varint,1,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"` // 总数量
	Items         []*FlashSaleRecordResponse `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`                              // 秒杀记录列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListFlashSaleRecordsResponse) Reset() {
	*x = ListFlashSaleRecordsResponse{}
	mi := &file_coupon_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListFlashSaleRecordsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFlashSaleRecordsResponse) ProtoMessage() {}

func (x *ListFlashSaleRecordsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFlashSaleRecordsResponse.ProtoReflect.Descriptor instead.
func (*ListFlashSaleRecordsResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{29}
}

func (x *ListFlashSaleRecordsResponse) GetTotalCount() int64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *ListFlashSaleRecordsResponse) GetItems() []*FlashSaleRecordResponse {
	if x != nil {
		return x.Items
	}
	return nil
}

// 订单-优惠券分布式事务请求
type SubmitOrderWithCouponsRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	OrderSn        string                 `protobuf:"bytes,1,opt,name=order_sn,json=orderSn,proto3" json:"order_sn,omitempty"`                        // 订单号
	UserId         int64                  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                          // 用户ID
	CouponIds      []int64                `protobuf:"varint,3,rep,packed,name=coupon_ids,json=couponIds,proto3" json:"coupon_ids,omitempty"`          // 使用的优惠券ID列表
	OriginalAmount float64                `protobuf:"fixed64,4,opt,name=original_amount,json=originalAmount,proto3" json:"original_amount,omitempty"` // 原价金额
	DiscountAmount float64                `protobuf:"fixed64,5,opt,name=discount_amount,json=discountAmount,proto3" json:"discount_amount,omitempty"` // 折扣金额
	FinalAmount    float64                `protobuf:"fixed64,6,opt,name=final_amount,json=finalAmount,proto3" json:"final_amount,omitempty"`          // 最终金额
	PaymentMethod  int32                  `protobuf:"varint,7,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`     // 支付方式
	GoodsDetails   []*OrderGoodsDetail    `protobuf:"bytes,8,rep,name=goods_details,json=goodsDetails,proto3" json:"goods_details,omitempty"`         // 商品详情
	Address        string                 `protobuf:"bytes,9,opt,name=address,proto3" json:"address,omitempty"`                                       // 收货地址
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *SubmitOrderWithCouponsRequest) Reset() {
	*x = SubmitOrderWithCouponsRequest{}
	mi := &file_coupon_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitOrderWithCouponsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderWithCouponsRequest) ProtoMessage() {}

func (x *SubmitOrderWithCouponsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderWithCouponsRequest.ProtoReflect.Descriptor instead.
func (*SubmitOrderWithCouponsRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{30}
}

func (x *SubmitOrderWithCouponsRequest) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

func (x *SubmitOrderWithCouponsRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *SubmitOrderWithCouponsRequest) GetCouponIds() []int64 {
	if x != nil {
		return x.CouponIds
	}
	return nil
}

func (x *SubmitOrderWithCouponsRequest) GetOriginalAmount() float64 {
	if x != nil {
		return x.OriginalAmount
	}
	return 0
}

func (x *SubmitOrderWithCouponsRequest) GetDiscountAmount() float64 {
	if x != nil {
		return x.DiscountAmount
	}
	return 0
}

func (x *SubmitOrderWithCouponsRequest) GetFinalAmount() float64 {
	if x != nil {
		return x.FinalAmount
	}
	return 0
}

func (x *SubmitOrderWithCouponsRequest) GetPaymentMethod() int32 {
	if x != nil {
		return x.PaymentMethod
	}
	return 0
}

func (x *SubmitOrderWithCouponsRequest) GetGoodsDetails() []*OrderGoodsDetail {
	if x != nil {
		return x.GoodsDetails
	}
	return nil
}

func (x *SubmitOrderWithCouponsRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type SubmitOrderWithCouponsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                       // 是否成功
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                        // 响应消息
	TransactionId *string                `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"` // 分布式事务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubmitOrderWithCouponsResponse) Reset() {
	*x = SubmitOrderWithCouponsResponse{}
	mi := &file_coupon_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubmitOrderWithCouponsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderWithCouponsResponse) ProtoMessage() {}

func (x *SubmitOrderWithCouponsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderWithCouponsResponse.ProtoReflect.Descriptor instead.
func (*SubmitOrderWithCouponsResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{31}
}

func (x *SubmitOrderWithCouponsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SubmitOrderWithCouponsResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SubmitOrderWithCouponsResponse) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

// 秒杀-库存分布式事务请求
type ProcessFlashSaleWithInventoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	UserId        int64                  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                  // 用户ID
	FlashSaleId   int64                  `protobuf:"varint,2,opt,name=flash_sale_id,json=flashSaleId,proto3" json:"flash_sale_id,omitempty"` // 秒杀活动ID
	GoodsId       int64                  `protobuf:"varint,3,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"`               // 商品ID
	Quantity      int32                  `protobuf:"varint,4,opt,name=quantity,proto3" json:"quantity,omitempty"`                            // 数量
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessFlashSaleWithInventoryRequest) Reset() {
	*x = ProcessFlashSaleWithInventoryRequest{}
	mi := &file_coupon_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessFlashSaleWithInventoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFlashSaleWithInventoryRequest) ProtoMessage() {}

func (x *ProcessFlashSaleWithInventoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFlashSaleWithInventoryRequest.ProtoReflect.Descriptor instead.
func (*ProcessFlashSaleWithInventoryRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{32}
}

func (x *ProcessFlashSaleWithInventoryRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcessFlashSaleWithInventoryRequest) GetFlashSaleId() int64 {
	if x != nil {
		return x.FlashSaleId
	}
	return 0
}

func (x *ProcessFlashSaleWithInventoryRequest) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *ProcessFlashSaleWithInventoryRequest) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type ProcessFlashSaleWithInventoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`                                       // 是否成功
	Message       string                 `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`                                        // 响应消息
	TransactionId *string                `protobuf:"bytes,3,opt,name=transaction_id,json=transactionId,proto3,oneof" json:"transaction_id,omitempty"` // 分布式事务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ProcessFlashSaleWithInventoryResponse) Reset() {
	*x = ProcessFlashSaleWithInventoryResponse{}
	mi := &file_coupon_proto_msgTypes[33]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessFlashSaleWithInventoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessFlashSaleWithInventoryResponse) ProtoMessage() {}

func (x *ProcessFlashSaleWithInventoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[33]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessFlashSaleWithInventoryResponse.ProtoReflect.Descriptor instead.
func (*ProcessFlashSaleWithInventoryResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{33}
}

func (x *ProcessFlashSaleWithInventoryResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessFlashSaleWithInventoryResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ProcessFlashSaleWithInventoryResponse) GetTransactionId() string {
	if x != nil && x.TransactionId != nil {
		return *x.TransactionId
	}
	return ""
}

// 获取分布式事务状态
type GetTransactionStatusRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gid           string                 `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"` // DTM全局事务ID
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusRequest) Reset() {
	*x = GetTransactionStatusRequest{}
	mi := &file_coupon_proto_msgTypes[34]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusRequest) ProtoMessage() {}

func (x *GetTransactionStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[34]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusRequest.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusRequest) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{34}
}

func (x *GetTransactionStatusRequest) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

type GetTransactionStatusResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Gid           string                 `protobuf:"bytes,1,opt,name=gid,proto3" json:"gid,omitempty"`                               // DTM全局事务ID
	Status        string                 `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`                         // 事务状态: prepared, aborting, succeeded, failed
	CreatedAt     int64                  `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"` // 创建时间
	UpdatedAt     int64                  `protobuf:"varint,4,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"` // 更新时间
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetTransactionStatusResponse) Reset() {
	*x = GetTransactionStatusResponse{}
	mi := &file_coupon_proto_msgTypes[35]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetTransactionStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionStatusResponse) ProtoMessage() {}

func (x *GetTransactionStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[35]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionStatusResponse.ProtoReflect.Descriptor instead.
func (*GetTransactionStatusResponse) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{35}
}

func (x *GetTransactionStatusResponse) GetGid() string {
	if x != nil {
		return x.Gid
	}
	return ""
}

func (x *GetTransactionStatusResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *GetTransactionStatusResponse) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *GetTransactionStatusResponse) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

// 订单商品详情
type OrderGoodsDetail struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	GoodsId       int64                  `protobuf:"varint,1,opt,name=goods_id,json=goodsId,proto3" json:"goods_id,omitempty"` // 商品ID
	Quantity      int32                  `protobuf:"varint,2,opt,name=quantity,proto3" json:"quantity,omitempty"`              // 数量
	Price         float64                `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`                   // 价格
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OrderGoodsDetail) Reset() {
	*x = OrderGoodsDetail{}
	mi := &file_coupon_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OrderGoodsDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderGoodsDetail) ProtoMessage() {}

func (x *OrderGoodsDetail) ProtoReflect() protoreflect.Message {
	mi := &file_coupon_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderGoodsDetail.ProtoReflect.Descriptor instead.
func (*OrderGoodsDetail) Descriptor() ([]byte, []int) {
	return file_coupon_proto_rawDescGZIP(), []int{36}
}

func (x *OrderGoodsDetail) GetGoodsId() int64 {
	if x != nil {
		return x.GoodsId
	}
	return 0
}

func (x *OrderGoodsDetail) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderGoodsDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

var File_coupon_proto protoreflect.FileDescriptor

var file_coupon_proto_rawDesc = string([]byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x03, 0x0a, 0x1b,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6d, 0x61, 0x78,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65,
	0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61, 0x79, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44, 0x61, 0x79, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xae, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x2a, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x75,
	0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xa4, 0x04, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e,
	0x6d, 0x69, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e,
	0x0a, 0x13, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x6d, 0x61, 0x78,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x5f, 0x64, 0x61,
	0x79, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x44,
	0x61, 0x79, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x6d, 0x0a, 0x1b,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5d, 0x0a, 0x14, 0x52,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x22, 0x89, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a,
	0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xf0, 0x02, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1c, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x64, 0x41, 0x74, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x22, 0x65, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x1e, 0x43,
	0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5e, 0x0a, 0x0f, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x1f,
	0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x03, 0x52, 0x0e, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x3b, 0x0a,
	0x10, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x22, 0x46, 0x0a, 0x0f, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x22, 0x89, 0x01, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x60,
	0x0a, 0x12, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73,
	0x22, 0x32, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x5f, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x53, 0x6e, 0x22, 0xec, 0x01, 0x0a, 0x1e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x79, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01,
	0x01, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x82, 0x03,
	0x0a, 0x19, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x63,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x6c, 0x61, 0x73, 0x68,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f, 0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x24, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x33,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x22, 0x74, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x5a, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74,
	0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61,
	0x6c, 0x65, 0x49, 0x64, 0x22, 0xaa, 0x01, 0x0a, 0x1c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a,
	0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x0c, 0x75,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x42, 0x11,
	0x0a, 0x0f, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69,
	0x64, 0x22, 0x3e, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a,
	0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x49,
	0x64, 0x22, 0xa5, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63,
	0x6b, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x72, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6f,
	0x6c, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x73, 0x6f, 0x6c, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xa4, 0x01, 0x0a, 0x1d, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x12, 0x0a,
	0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x61, 0x67,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x22, 0xc9, 0x02, 0x0a, 0x17, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x0e, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x48, 0x00, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x64, 0x88, 0x01, 0x01, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0b,
	0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x36, 0x0a, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x6f, 0x0a, 0x1c,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0xe0, 0x02,
	0x0a, 0x1d, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x64, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x61, 0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x64,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x61,
	0x6c, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36,
	0x0a, 0x0d, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0c, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x93, 0x01, 0x0a, 0x1e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x22, 0x9a, 0x01, 0x0a, 0x24, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x6c, 0x61, 0x73,
	0x68, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x9a, 0x01, 0x0a, 0x25, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2a, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x88, 0x01, 0x01, 0x42, 0x11, 0x0a,
	0x0f, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x22, 0x2f, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x67, 0x69,
	0x64, 0x22, 0x86, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5f, 0x0a, 0x10, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x32, 0xb0, 0x0e, 0x0a, 0x06,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x70,
	0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x13, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x12, 0x15, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x16,
	0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x4c, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x1b, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x76, 0x61,
	0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5c,
	0x0a, 0x17, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a,
	0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x12, 0x2e, 0x55, 0x73, 0x65,
	0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13,
	0x2e, 0x55, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x17, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x12, 0x1f, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1a, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x5c, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x61, 0x6c, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x53,
	0x0a, 0x14, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69,
	0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61,
	0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x47, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53,
	0x61, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x12, 0x19, 0x2e, 0x47, 0x65, 0x74, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x57, 0x0a, 0x16,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x16, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74, 0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x12,
	0x1e, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6e, 0x0a, 0x1d, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x53, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x25, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x53, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x53, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x54, 0x72, 0x79, 0x46, 0x6c, 0x61, 0x73,
	0x68, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x12,
	0x1c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x0f, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x46,
	0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1c, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x74, 0x65, 0x46, 0x6c, 0x61, 0x73, 0x68, 0x53, 0x61, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x09,
	0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
})

var (
	file_coupon_proto_rawDescOnce sync.Once
	file_coupon_proto_rawDescData []byte
)

func file_coupon_proto_rawDescGZIP() []byte {
	file_coupon_proto_rawDescOnce.Do(func() {
		file_coupon_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_coupon_proto_rawDesc), len(file_coupon_proto_rawDesc)))
	})
	return file_coupon_proto_rawDescData
}

var file_coupon_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_coupon_proto_goTypes = []any{
	(*CreateCouponTemplateRequest)(nil),           // 0: CreateCouponTemplateRequest
	(*UpdateCouponTemplateRequest)(nil),           // 1: UpdateCouponTemplateRequest
	(*GetCouponTemplateRequest)(nil),              // 2: GetCouponTemplateRequest
	(*ListCouponTemplatesRequest)(nil),            // 3: ListCouponTemplatesRequest
	(*CouponTemplateResponse)(nil),                // 4: CouponTemplateResponse
	(*ListCouponTemplatesResponse)(nil),           // 5: ListCouponTemplatesResponse
	(*ReceiveCouponRequest)(nil),                  // 6: ReceiveCouponRequest
	(*GetUserCouponsRequest)(nil),                 // 7: GetUserCouponsRequest
	(*GetAvailableCouponsRequest)(nil),            // 8: GetAvailableCouponsRequest
	(*UserCouponResponse)(nil),                    // 9: UserCouponResponse
	(*ListUserCouponsResponse)(nil),               // 10: ListUserCouponsResponse
	(*CalculateCouponDiscountRequest)(nil),        // 11: CalculateCouponDiscountRequest
	(*CouponOrderItem)(nil),                       // 12: CouponOrderItem
	(*CalculateCouponDiscountResponse)(nil),       // 13: CalculateCouponDiscountResponse
	(*CouponRejection)(nil),                       // 14: CouponRejection
	(*UseCouponsRequest)(nil),                     // 15: UseCouponsRequest
	(*UseCouponsResponse)(nil),                    // 16: UseCouponsResponse
	(*ReleaseCouponsRequest)(nil),                 // 17: ReleaseCouponsRequest
	(*CreateFlashSaleActivityRequest)(nil),        // 18: CreateFlashSaleActivityRequest
	(*GetFlashSaleActivityRequest)(nil),           // 19: GetFlashSaleActivityRequest
	(*ListFlashSaleActivitiesRequest)(nil),        // 20: ListFlashSaleActivitiesRequest
	(*FlashSaleActivityResponse)(nil),             // 21: FlashSaleActivityResponse
	(*ListFlashSaleActivitiesResponse)(nil),       // 22: ListFlashSaleActivitiesResponse
	(*ParticipateFlashSaleRequest)(nil),           // 23: ParticipateFlashSaleRequest
	(*ParticipateFlashSaleResponse)(nil),          // 24: ParticipateFlashSaleResponse
	(*GetFlashSaleStockRequest)(nil),              // 25: GetFlashSaleStockRequest
	(*FlashSaleStockResponse)(nil),                // 26: FlashSaleStockResponse
	(*GetUserFlashSaleRecordRequest)(nil),         // 27: GetUserFlashSaleRecordRequest
	(*FlashSaleRecordResponse)(nil),               // 28: FlashSaleRecordResponse
	(*ListFlashSaleRecordsResponse)(nil),          // 29: ListFlashSaleRecordsResponse
	(*SubmitOrderWithCouponsRequest)(nil),         // 30: SubmitOrderWithCouponsRequest
	(*SubmitOrderWithCouponsResponse)(nil),        // 31: SubmitOrderWithCouponsResponse
	(*ProcessFlashSaleWithInventoryRequest)(nil),  // 32: ProcessFlashSaleWithInventoryRequest
	(*ProcessFlashSaleWithInventoryResponse)(nil), // 33: ProcessFlashSaleWithInventoryResponse
	(*GetTransactionStatusRequest)(nil),           // 34: GetTransactionStatusRequest
	(*GetTransactionStatusResponse)(nil),          // 35: GetTransactionStatusResponse
	(*OrderGoodsDetail)(nil),                      // 36: OrderGoodsDetail
	(*emptypb.Empty)(nil),                         // 37: google.protobuf.Empty
}
var file_coupon_proto_depIdxs = []int32{
	4,  // 0: ListCouponTemplatesResponse.items:type_name -> CouponTemplateResponse
	4,  // 1: UserCouponResponse.template:type_name -> CouponTemplateResponse
	9,  // 2: ListUserCouponsResponse.items:type_name -> UserCouponResponse
	12, // 3: CalculateCouponDiscountRequest.order_items:type_name -> CouponOrderItem
	14, // 4: CalculateCouponDiscountResponse.rejected_coupons:type_name -> CouponRejection
	4,  // 5: FlashSaleActivityResponse.template:type_name -> CouponTemplateResponse
	21, // 6: ListFlashSaleActivitiesResponse.items:type_name -> FlashSaleActivityResponse
	21, // 7: FlashSaleRecordResponse.activity:type_name -> FlashSaleActivityResponse
	28, // 8: ListFlashSaleRecordsResponse.items:type_name -> FlashSaleRecordResponse
	36, // 9: SubmitOrderWithCouponsRequest.goods_details:type_name -> OrderGoodsDetail
	0,  // 10: Coupon.CreateCouponTemplate:input_type -> CreateCouponTemplateRequest
	2,  // 11: Coupon.GetCouponTemplate:input_type -> GetCouponTemplateRequest
	1,  // 12: Coupon.UpdateCouponTemplate:input_type -> UpdateCouponTemplateRequest
	3,  // 13: Coupon.ListCouponTemplates:input_type -> ListCouponTemplatesRequest
	6,  // 14: Coupon.ReceiveCoupon:input_type -> ReceiveCouponRequest
	7,  // 15: Coupon.GetUserCoupons:input_type -> GetUserCouponsRequest
	8,  // 16: Coupon.GetAvailableCoupons:input_type -> GetAvailableCouponsRequest
	11, // 17: Coupon.CalculateCouponDiscount:input_type -> CalculateCouponDiscountRequest
	15, // 18: Coupon.UseCoupons:input_type -> UseCouponsRequest
	17, // 19: Coupon.ReleaseCoupons:input_type -> ReleaseCouponsRequest
	18, // 20: Coupon.CreateFlashSaleActivity:input_type -> CreateFlashSaleActivityRequest
	19, // 21: Coupon.GetFlashSaleActivity:input_type -> GetFlashSaleActivityRequest
	20, // 22: Coupon.ListFlashSaleActivities:input_type -> ListFlashSaleActivitiesRequest
	37, // 23: Coupon.GetActiveFlashSales:input_type -> google.protobuf.Empty
	23, // 24: Coupon.ParticipateFlashSale:input_type -> ParticipateFlashSaleRequest
	25, // 25: Coupon.GetFlashSaleStock:input_type -> GetFlashSaleStockRequest
	27, // 26: Coupon.GetUserFlashSaleRecord:input_type -> GetUserFlashSaleRecordRequest
	30, // 27: Coupon.SubmitOrderWithCoupons:input_type -> SubmitOrderWithCouponsRequest
	32, // 28: Coupon.ProcessFlashSaleWithInventory:input_type -> ProcessFlashSaleWithInventoryRequest
	34, // 29: Coupon.GetTransactionStatus:input_type -> GetTransactionStatusRequest
	23, // 30: Coupon.TryFlashSale:input_type -> ParticipateFlashSaleRequest
	23, // 31: Coupon.ConfirmFlashSale:input_type -> ParticipateFlashSaleRequest
	23, // 32: Coupon.CancelFlashSale:input_type -> ParticipateFlashSaleRequest
	4,  // 33: Coupon.CreateCouponTemplate:output_type -> CouponTemplateResponse
	4,  // 34: Coupon.GetCouponTemplate:output_type -> CouponTemplateResponse
	4,  // 35: Coupon.UpdateCouponTemplate:output_type -> CouponTemplateResponse
	5,  // 36: Coupon.ListCouponTemplates:output_type -> ListCouponTemplatesResponse
	9,  // 37: Coupon.ReceiveCoupon:output_type -> UserCouponResponse
	10, // 38: Coupon.GetUserCoupons:output_type -> ListUserCouponsResponse
	10, // 39: Coupon.GetAvailableCoupons:output_type -> ListUserCouponsResponse
	13, // 40: Coupon.CalculateCouponDiscount:output_type -> CalculateCouponDiscountResponse
	16, // 41: Coupon.UseCoupons:output_type -> UseCouponsResponse
	37, // 42: Coupon.ReleaseCoupons:output_type -> google.protobuf.Empty
	21, // 43: Coupon.CreateFlashSaleActivity:output_type -> FlashSaleActivityResponse
	21, // 44: Coupon.GetFlashSaleActivity:output_type -> FlashSaleActivityResponse
	22, // 45: Coupon.ListFlashSaleActivities:output_type -> ListFlashSaleActivitiesResponse
	22, // 46: Coupon.GetActiveFlashSales:output_type -> ListFlashSaleActivitiesResponse
	24, // 47: Coupon.ParticipateFlashSale:output_type -> ParticipateFlashSaleResponse
	26, // 48: Coupon.GetFlashSaleStock:output_type -> FlashSaleStockResponse
	29, // 49: Coupon.GetUserFlashSaleRecord:output_type -> ListFlashSaleRecordsResponse
	31, // 50: Coupon.SubmitOrderWithCoupons:output_type -> SubmitOrderWithCouponsResponse
	33, // 51: Coupon.ProcessFlashSaleWithInventory:output_type -> ProcessFlashSaleWithInventoryResponse
	35, // 52: Coupon.GetTransactionStatus:output_type -> GetTransactionStatusResponse
	37, // 53: Coupon.TryFlashSale:output_type -> google.protobuf.Empty
	37, // 54: Coupon.ConfirmFlashSale:output_type -> google.protobuf.Empty
	37, // 55: Coupon.CancelFlashSale:output_type -> google.protobuf.Empty
	33, // [33:56] is the sub-list for method output_type
	10, // [10:33] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_coupon_proto_init() }
func file_coupon_proto_init() {
	if File_coupon_proto != nil {
		return
	}
	file_coupon_proto_msgTypes[1].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[3].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[7].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[9].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[20].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[24].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[27].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[28].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[31].OneofWrappers = []any{}
	file_coupon_proto_msgTypes[33].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_coupon_proto_rawDesc), len(file_coupon_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_coupon_proto_goTypes,
		DependencyIndexes: file_coupon_proto_depIdxs,
		MessageInfos:      file_coupon_proto_msgTypes,
	}.Build()
	File_coupon_proto = out.File
	file_coupon_proto_goTypes = nil
	file_coupon_proto_depIdxs = nil
}
