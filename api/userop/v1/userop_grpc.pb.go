// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: userop.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserOp_UserFavList_FullMethodName      = "/UserOp/UserFavList"
	UserOp_CreateUserFav_FullMethodName    = "/UserOp/CreateUserFav"
	UserOp_DeleteUserFav_FullMethodName    = "/UserOp/DeleteUserFav"
	UserOp_GetUserFavDetail_FullMethodName = "/UserOp/GetUserFavDetail"
	UserOp_GetAddressList_FullMethodName   = "/UserOp/GetAddressList"
	UserOp_CreateAddress_FullMethodName    = "/UserOp/CreateAddress"
	UserOp_UpdateAddress_FullMethodName    = "/UserOp/UpdateAddress"
	UserOp_DeleteAddress_FullMethodName    = "/UserOp/DeleteAddress"
	UserOp_MessageList_FullMethodName      = "/UserOp/MessageList"
	UserOp_CreateMessage_FullMethodName    = "/UserOp/CreateMessage"
)

// UserOpClient is the client API for UserOp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserOpClient interface {
	// 用户收藏
	UserFavList(ctx context.Context, in *UserFavListRequest, opts ...grpc.CallOption) (*UserFavListResponse, error)
	CreateUserFav(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*UserFavResponse, error)
	DeleteUserFav(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetUserFavDetail(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*UserFavResponse, error)
	// 用户地址
	GetAddressList(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
	CreateAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error)
	UpdateAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 用户留言
	MessageList(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageListResponse, error)
	CreateMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
}

type userOpClient struct {
	cc grpc.ClientConnInterface
}

func NewUserOpClient(cc grpc.ClientConnInterface) UserOpClient {
	return &userOpClient{cc}
}

func (c *userOpClient) UserFavList(ctx context.Context, in *UserFavListRequest, opts ...grpc.CallOption) (*UserFavListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFavListResponse)
	err := c.cc.Invoke(ctx, UserOp_UserFavList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) CreateUserFav(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*UserFavResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFavResponse)
	err := c.cc.Invoke(ctx, UserOp_CreateUserFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) DeleteUserFav(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserOp_DeleteUserFav_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) GetUserFavDetail(ctx context.Context, in *UserFavRequest, opts ...grpc.CallOption) (*UserFavResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserFavResponse)
	err := c.cc.Invoke(ctx, UserOp_GetUserFavDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) GetAddressList(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, UserOp_GetAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) CreateAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*AddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressResponse)
	err := c.cc.Invoke(ctx, UserOp_CreateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) UpdateAddress(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserOp_UpdateAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) DeleteAddress(ctx context.Context, in *DeleteAddressRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, UserOp_DeleteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) MessageList(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageListResponse)
	err := c.cc.Invoke(ctx, UserOp_MessageList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userOpClient) CreateMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageResponse)
	err := c.cc.Invoke(ctx, UserOp_CreateMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserOpServer is the server API for UserOp service.
// All implementations must embed UnimplementedUserOpServer
// for forward compatibility.
type UserOpServer interface {
	// 用户收藏
	UserFavList(context.Context, *UserFavListRequest) (*UserFavListResponse, error)
	CreateUserFav(context.Context, *UserFavRequest) (*UserFavResponse, error)
	DeleteUserFav(context.Context, *UserFavRequest) (*emptypb.Empty, error)
	GetUserFavDetail(context.Context, *UserFavRequest) (*UserFavResponse, error)
	// 用户地址
	GetAddressList(context.Context, *AddressRequest) (*AddressListResponse, error)
	CreateAddress(context.Context, *AddressRequest) (*AddressResponse, error)
	UpdateAddress(context.Context, *AddressRequest) (*emptypb.Empty, error)
	DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error)
	// 用户留言
	MessageList(context.Context, *MessageRequest) (*MessageListResponse, error)
	CreateMessage(context.Context, *MessageRequest) (*MessageResponse, error)
	mustEmbedUnimplementedUserOpServer()
}

// UnimplementedUserOpServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserOpServer struct{}

func (UnimplementedUserOpServer) UserFavList(context.Context, *UserFavListRequest) (*UserFavListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserFavList not implemented")
}
func (UnimplementedUserOpServer) CreateUserFav(context.Context, *UserFavRequest) (*UserFavResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUserFav not implemented")
}
func (UnimplementedUserOpServer) DeleteUserFav(context.Context, *UserFavRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserFav not implemented")
}
func (UnimplementedUserOpServer) GetUserFavDetail(context.Context, *UserFavRequest) (*UserFavResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserFavDetail not implemented")
}
func (UnimplementedUserOpServer) GetAddressList(context.Context, *AddressRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedUserOpServer) CreateAddress(context.Context, *AddressRequest) (*AddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAddress not implemented")
}
func (UnimplementedUserOpServer) UpdateAddress(context.Context, *AddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAddress not implemented")
}
func (UnimplementedUserOpServer) DeleteAddress(context.Context, *DeleteAddressRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedUserOpServer) MessageList(context.Context, *MessageRequest) (*MessageListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MessageList not implemented")
}
func (UnimplementedUserOpServer) CreateMessage(context.Context, *MessageRequest) (*MessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedUserOpServer) mustEmbedUnimplementedUserOpServer() {}
func (UnimplementedUserOpServer) testEmbeddedByValue()                {}

// UnsafeUserOpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserOpServer will
// result in compilation errors.
type UnsafeUserOpServer interface {
	mustEmbedUnimplementedUserOpServer()
}

func RegisterUserOpServer(s grpc.ServiceRegistrar, srv UserOpServer) {
	// If the following call pancis, it indicates UnimplementedUserOpServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserOp_ServiceDesc, srv)
}

func _UserOp_UserFavList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).UserFavList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_UserFavList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).UserFavList(ctx, req.(*UserFavListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_CreateUserFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).CreateUserFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_CreateUserFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).CreateUserFav(ctx, req.(*UserFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_DeleteUserFav_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).DeleteUserFav(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_DeleteUserFav_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).DeleteUserFav(ctx, req.(*UserFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_GetUserFavDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFavRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).GetUserFavDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_GetUserFavDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).GetUserFavDetail(ctx, req.(*UserFavRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_GetAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).GetAddressList(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_CreateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).CreateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_CreateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).CreateAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_UpdateAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).UpdateAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_UpdateAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).UpdateAddress(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).DeleteAddress(ctx, req.(*DeleteAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_MessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).MessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_MessageList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).MessageList(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserOp_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserOpServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserOp_CreateMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserOpServer).CreateMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserOp_ServiceDesc is the grpc.ServiceDesc for UserOp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserOp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserOp",
	HandlerType: (*UserOpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserFavList",
			Handler:    _UserOp_UserFavList_Handler,
		},
		{
			MethodName: "CreateUserFav",
			Handler:    _UserOp_CreateUserFav_Handler,
		},
		{
			MethodName: "DeleteUserFav",
			Handler:    _UserOp_DeleteUserFav_Handler,
		},
		{
			MethodName: "GetUserFavDetail",
			Handler:    _UserOp_GetUserFavDetail_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _UserOp_GetAddressList_Handler,
		},
		{
			MethodName: "CreateAddress",
			Handler:    _UserOp_CreateAddress_Handler,
		},
		{
			MethodName: "UpdateAddress",
			Handler:    _UserOp_UpdateAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _UserOp_DeleteAddress_Handler,
		},
		{
			MethodName: "MessageList",
			Handler:    _UserOp_MessageList_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _UserOp_CreateMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "userop.proto",
}
