// Code generated by protoc-gen-go-gin. DO NOT EDIT.

package v1

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type UserHttpServer struct {
	server UserServer
	router gin.IRouter
}

func RegisterUserServerHTTPServer(srv UserServer, r gin.IRouter) {
	s := UserHttpServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *UserHttpServer) GetUserList_0(c *gin.Context) {
	var in PageInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.GetUserList(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) GetUserByMobile_0(c *gin.Context) {
	var in MobileRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.GetUserByMobile(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) GetUserById_0(c *gin.Context) {
	var in IdRequest

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.GetUserById(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) CreateUser_0(c *gin.Context) {
	var in CreateUserInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CreateUser(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) UpdateUser_0(c *gin.Context) {
	var in UpdateUserInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.UpdateUser(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) CheckPassWord_0(c *gin.Context) {
	var in PasswordCheckInfo

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.CheckPassWord(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) RegisterService() {

	s.router.Handle("POST", "/v1/users", s.GetUserList_0)

	s.router.Handle("POST", "/v1/user/mobile", s.GetUserByMobile_0)

	s.router.Handle("POST", "/v1/user/id", s.GetUserById_0)

	s.router.Handle("POST", "/v1/user/create", s.CreateUser_0)

	s.router.Handle("POST", "/v1/user/update", s.UpdateUser_0)

	s.router.Handle("POST", "/v1/user/password", s.CheckPassWord_0)

}
