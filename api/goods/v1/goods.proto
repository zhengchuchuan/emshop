// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=paths=source_relative api/goods/v1/goods.proto

syntax = "proto3";
import "google/protobuf/empty.proto";
option go_package = "./;proto";

service Goods{
  //商品接口
  rpc GoodsList(GoodsFilterRequest) returns(GoodsListResponse);
  //现在用户提交订单有多个商品，你得批量查询商品的信息吧
  rpc BatchGetGoods(BatchGoodsIdInfo) returns(GoodsListResponse); //批量获取商品信息
  rpc CreateGoods(CreateGoodsInfo) returns (GoodsInfoResponse);
  rpc DeleteGoods(DeleteGoodsInfo) returns (google.protobuf.Empty);
  rpc UpdateGoods(CreateGoodsInfo) returns (google.protobuf.Empty);
  rpc GetGoodsDetail(GoodInfoRequest) returns(GoodsInfoResponse);

  //商品分类
  rpc GetAllCategorysList(google.protobuf.Empty) returns(CategoryListResponse); //获取所有的分类
  //获取子分类
  rpc GetSubCategory(CategoryListRequest) returns(SubCategoryListResponse);
  //新增：获取树形分类结构（强类型）
  rpc GetCategoryTree(google.protobuf.Empty) returns(CategoryTreeResponse);
  rpc CreateCategory(CategoryInfoRequest) returns(CategoryInfoResponse); //新建分类信息
  rpc DeleteCategory(DeleteCategoryRequest) returns(google.protobuf.Empty); //删除分类
  rpc UpdateCategory(CategoryInfoRequest) returns(google.protobuf.Empty); //修改分类信息

  //品牌和轮播图
  rpc BrandList(BrandFilterRequest) returns(BrandListResponse); //
  rpc CreateBrand(BrandRequest) returns(BrandInfoResponse); //新建品牌信息
  rpc DeleteBrand(BrandRequest) returns(google.protobuf.Empty); //删除品牌
  rpc UpdateBrand(BrandRequest) returns(google.protobuf.Empty); //修改品牌信息

  //轮播图
  rpc BannerList(google.protobuf.Empty) returns(BannerListResponse); //获取轮播列表信息
  rpc CreateBanner(BannerRequest) returns(BannerResponse); //添加banner图
  rpc DeleteBanner(BannerRequest) returns(google.protobuf.Empty); //删除轮播图
  rpc UpdateBanner(BannerRequest) returns(google.protobuf.Empty); //修改轮播图

  //品牌分类
  rpc CategoryBrandList(CategoryBrandFilterRequest) returns(CategoryBrandListResponse); //获取轮播列表信息
  //通过category获取brands
  rpc GetCategoryBrandList(CategoryInfoRequest) returns(BrandListResponse);
  rpc CreateCategoryBrand(CategoryBrandRequest) returns(CategoryBrandResponse); //添加banner图
  rpc DeleteCategoryBrand(CategoryBrandRequest) returns(google.protobuf.Empty); //删除轮播图
  rpc UpdateCategoryBrand(CategoryBrandRequest) returns(google.protobuf.Empty); //修改轮播图

  //数据同步
  rpc SyncGoodsData(SyncDataRequest) returns(SyncDataResponse); //同步MySQL和ES商品数据

  //批量操作
  rpc BatchDeleteGoods(BatchDeleteGoodsRequest) returns(BatchOperationResponse); //批量删除商品
  rpc BatchUpdateGoodsStatus(BatchUpdateGoodsStatusRequest) returns(BatchOperationResponse); //批量更新商品状态
}

message CategoryListRequest {
  int32 id = 1;
  int32 level = 2;
}

message CategoryInfoRequest {
  int32 id = 1;
  string name = 2;
  int32 parentCategory = 3;
  int32 level = 4;
  bool isTab = 5;
}

message DeleteCategoryRequest {
  int32 id = 1;
}

message QueryCategoryRequest {
  int32 id = 1;
  string name = 2;
}

message CategoryInfoResponse {
  int32 id = 1;
  string name = 2;
  int32 parentCategory = 3;
  int32 level = 4;
  bool isTab = 5;
}

message CategoryListResponse {
  int32 total = 1;
  repeated CategoryInfoResponse data = 2;
}

// 新增：树形分类节点，支持递归嵌套
message CategoryTreeNode {
  int32 id = 1;
  string name = 2;
  int32 parent_category = 3;
  int32 level = 4;
  bool is_tab = 5;
  repeated CategoryTreeNode children = 6;
}

// 新增：分类统计信息
message CategoryStatistics {
  int32 level1_count = 1;
  int32 level2_count = 2;
  int32 level3_count = 3;
  int32 max_depth = 4;
  int32 total_count = 5;
}

// 新增：树形分类响应结构
message CategoryTreeResponse {
  repeated CategoryTreeNode categories = 1;
  CategoryStatistics stats = 2;
}

message SubCategoryListResponse {
  int32 total = 1;
  CategoryInfoResponse info = 2;
  repeated CategoryInfoResponse subCategorys = 3;
}

message CategoryBrandFilterRequest  {
  optional int32 pages = 1;
  optional int32 pagePerNums = 2;
}

message FilterRequest  {
  optional int32 pages = 1;
  optional int32 pagePerNums = 2;
}

message CategoryBrandRequest{
  int32 id = 1;
  int32 categoryId = 2;
  int32 brandId = 3;
}
message CategoryBrandResponse{
  int32 id = 1;
  BrandInfoResponse brand = 2;
  CategoryInfoResponse category = 3;
}

message BannerRequest {
  int32 id = 1;
  int32 index = 2;
  string image = 3;
  string url = 4;
}

message BannerResponse {
  int32 id = 1;
  int32 index = 2;
  string image = 3;
  string url = 4;
}

message BrandFilterRequest {
  optional int32 pages = 1;
  optional int32 pagePerNums = 2;
}

message BrandRequest {
  int32 id = 1;
  string name = 2;
  string logo = 3;
}

message BrandInfoResponse {
  int32 id = 1;
  string name = 2;
  string logo = 3;
}

message BrandListResponse {
  int32 total = 1;
  repeated BrandInfoResponse data = 2;
}

message BannerListResponse {
  int32 total = 1;
  repeated BannerResponse data = 2;
}

message CategoryBrandListResponse {
  int32 total = 1;
  repeated CategoryBrandResponse data = 2;
}



message BatchGoodsIdInfo {
  repeated int32 id = 1;
}


message DeleteGoodsInfo {
  int32 id = 1;
}

message CategoryBriefInfoResponse {
  int32 id = 1;
  string name = 2;
}

message CategoryFilterRequest {
  int32 id = 1;
  bool  isTab = 2;
}

message GoodInfoRequest {
  int32 id = 1;
}

message CreateGoodsInfo {
  int32 id = 1;
  string name = 2;
  string goodsSn = 3;
  float marketPrice = 8;
  float shopPrice = 9;
  string goodsBrief = 10;
  string goodsDesc = 11;
  bool shipFree = 12;
  repeated string images = 13;
  repeated string descImages = 14;
  string goodsFrontImage = 15;
  bool isNew = 16;
  bool isHot = 17;
  bool onSale = 18;
  int32 categoryId = 19;
  int32 brandId = 20;
}

message GoodsReduceRequest {
  int32 GoodsId = 1;
  int32 nums = 2;
}

message BatchCategoryInfoRequest {
  repeated int32 id = 1;
  int32 goodsNums = 2;
  int32 brandNums = 3;
}

message GoodsFilterRequest  {
  optional int32 priceMin = 1;
  optional int32 priceMax = 2;
  optional bool  isHot = 3;
  optional bool  isNew = 4;
  optional bool  isTab = 5;
  optional int32 topCategory = 6;
  optional int32 pages = 7;
  optional int32 pagePerNums = 8;
  optional string keyWords = 9;
  optional int32 brand = 10;
}


message GoodsInfoResponse {
  int32 id = 1;
  int32 categoryId = 2;
  string name = 3;
  string goodsSn = 4;
  int32 clickNum = 5;
  int32 soldNum = 6;
  int32 favNum = 7;
  float marketPrice = 9;
  float shopPrice = 10;
  string goodsBrief = 11;
  string goodsDesc = 12;
  bool shipFree = 13;
  repeated string images = 14;
  repeated string descImages = 15;
  string goodsFrontImage = 16;
  bool isNew = 17;
  bool isHot = 18;
  bool onSale = 19;
  int64 addTime = 20;
  CategoryBriefInfoResponse category = 21;
  BrandInfoResponse brand = 22;
  int32 stocks = 23; // 库存数量
}

message GoodsListResponse {
  int32 total = 1;
  repeated GoodsInfoResponse data = 2;
}

message SyncDataRequest {
  bool forceSync = 1; // 是否强制全量同步
  repeated int32 goodsIds = 2; // 指定同步的商品ID，为空则同步所有
}

message SyncDataResponse {
  bool success = 1;
  string message = 2;
  int32 syncedCount = 3; // 同步的记录数
  int32 failedCount = 4; // 失败的记录数
  repeated string errors = 5; // 错误信息列表
}

message BatchDeleteGoodsRequest {
  repeated int32 ids = 1; // 要删除的商品ID列表
}

message BatchUpdateGoodsStatusRequest {
  repeated int32 ids = 1; // 要更新状态的商品ID列表
  bool onSale = 2; // 上架状态
  bool isHot = 3; // 热销状态
  bool isNew = 4; // 新品状态
  bool updateOnSale = 5; // 是否更新上架状态
  bool updateIsHot = 6; // 是否更新热销状态
  bool updateIsNew = 7; // 是否更新新品状态
}

message BatchOperationResponse {
  bool success = 1;
  string message = 2;
  int32 successCount = 3; // 成功操作的数量
  int32 failedCount = 4; // 失败的数量
  repeated string errors = 5; // 错误信息列表
}