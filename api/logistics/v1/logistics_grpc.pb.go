// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: logistics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Logistics_CreateLogisticsOrder_FullMethodName  = "/Logistics/CreateLogisticsOrder"
	Logistics_GetLogisticsInfo_FullMethodName      = "/Logistics/GetLogisticsInfo"
	Logistics_GetLogisticsTracks_FullMethodName    = "/Logistics/GetLogisticsTracks"
	Logistics_UpdateLogisticsStatus_FullMethodName = "/Logistics/UpdateLogisticsStatus"
	Logistics_SimulateShipment_FullMethodName      = "/Logistics/SimulateShipment"
	Logistics_SimulateDelivery_FullMethodName      = "/Logistics/SimulateDelivery"
	Logistics_CalculateShippingFee_FullMethodName  = "/Logistics/CalculateShippingFee"
	Logistics_GetLogisticsCompanies_FullMethodName = "/Logistics/GetLogisticsCompanies"
	Logistics_GetCouriers_FullMethodName           = "/Logistics/GetCouriers"
)

// LogisticsClient is the client API for Logistics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogisticsClient interface {
	// 创建物流订单
	CreateLogisticsOrder(ctx context.Context, in *CreateLogisticsOrderRequest, opts ...grpc.CallOption) (*CreateLogisticsOrderResponse, error)
	// 查询物流信息
	GetLogisticsInfo(ctx context.Context, in *GetLogisticsInfoRequest, opts ...grpc.CallOption) (*GetLogisticsInfoResponse, error)
	// 查询物流轨迹
	GetLogisticsTracks(ctx context.Context, in *GetLogisticsTracksRequest, opts ...grpc.CallOption) (*GetLogisticsTracksResponse, error)
	// 更新物流状态（内部调用）
	UpdateLogisticsStatus(ctx context.Context, in *UpdateLogisticsStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 模拟发货
	SimulateShipment(ctx context.Context, in *SimulateShipmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 模拟签收
	SimulateDelivery(ctx context.Context, in *SimulateDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// 计算运费
	CalculateShippingFee(ctx context.Context, in *CalculateShippingFeeRequest, opts ...grpc.CallOption) (*CalculateShippingFeeResponse, error)
	// 获取物流公司列表
	GetLogisticsCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogisticsCompaniesResponse, error)
	// 获取配送员列表
	GetCouriers(ctx context.Context, in *GetCouriersRequest, opts ...grpc.CallOption) (*GetCouriersResponse, error)
}

type logisticsClient struct {
	cc grpc.ClientConnInterface
}

func NewLogisticsClient(cc grpc.ClientConnInterface) LogisticsClient {
	return &logisticsClient{cc}
}

func (c *logisticsClient) CreateLogisticsOrder(ctx context.Context, in *CreateLogisticsOrderRequest, opts ...grpc.CallOption) (*CreateLogisticsOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLogisticsOrderResponse)
	err := c.cc.Invoke(ctx, Logistics_CreateLogisticsOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) GetLogisticsInfo(ctx context.Context, in *GetLogisticsInfoRequest, opts ...grpc.CallOption) (*GetLogisticsInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogisticsInfoResponse)
	err := c.cc.Invoke(ctx, Logistics_GetLogisticsInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) GetLogisticsTracks(ctx context.Context, in *GetLogisticsTracksRequest, opts ...grpc.CallOption) (*GetLogisticsTracksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLogisticsTracksResponse)
	err := c.cc.Invoke(ctx, Logistics_GetLogisticsTracks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) UpdateLogisticsStatus(ctx context.Context, in *UpdateLogisticsStatusRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Logistics_UpdateLogisticsStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) SimulateShipment(ctx context.Context, in *SimulateShipmentRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Logistics_SimulateShipment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) SimulateDelivery(ctx context.Context, in *SimulateDeliveryRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Logistics_SimulateDelivery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) CalculateShippingFee(ctx context.Context, in *CalculateShippingFeeRequest, opts ...grpc.CallOption) (*CalculateShippingFeeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CalculateShippingFeeResponse)
	err := c.cc.Invoke(ctx, Logistics_CalculateShippingFee_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) GetLogisticsCompanies(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*LogisticsCompaniesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LogisticsCompaniesResponse)
	err := c.cc.Invoke(ctx, Logistics_GetLogisticsCompanies_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logisticsClient) GetCouriers(ctx context.Context, in *GetCouriersRequest, opts ...grpc.CallOption) (*GetCouriersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCouriersResponse)
	err := c.cc.Invoke(ctx, Logistics_GetCouriers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogisticsServer is the server API for Logistics service.
// All implementations must embed UnimplementedLogisticsServer
// for forward compatibility.
type LogisticsServer interface {
	// 创建物流订单
	CreateLogisticsOrder(context.Context, *CreateLogisticsOrderRequest) (*CreateLogisticsOrderResponse, error)
	// 查询物流信息
	GetLogisticsInfo(context.Context, *GetLogisticsInfoRequest) (*GetLogisticsInfoResponse, error)
	// 查询物流轨迹
	GetLogisticsTracks(context.Context, *GetLogisticsTracksRequest) (*GetLogisticsTracksResponse, error)
	// 更新物流状态（内部调用）
	UpdateLogisticsStatus(context.Context, *UpdateLogisticsStatusRequest) (*emptypb.Empty, error)
	// 模拟发货
	SimulateShipment(context.Context, *SimulateShipmentRequest) (*emptypb.Empty, error)
	// 模拟签收
	SimulateDelivery(context.Context, *SimulateDeliveryRequest) (*emptypb.Empty, error)
	// 计算运费
	CalculateShippingFee(context.Context, *CalculateShippingFeeRequest) (*CalculateShippingFeeResponse, error)
	// 获取物流公司列表
	GetLogisticsCompanies(context.Context, *emptypb.Empty) (*LogisticsCompaniesResponse, error)
	// 获取配送员列表
	GetCouriers(context.Context, *GetCouriersRequest) (*GetCouriersResponse, error)
	mustEmbedUnimplementedLogisticsServer()
}

// UnimplementedLogisticsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLogisticsServer struct{}

func (UnimplementedLogisticsServer) CreateLogisticsOrder(context.Context, *CreateLogisticsOrderRequest) (*CreateLogisticsOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogisticsOrder not implemented")
}
func (UnimplementedLogisticsServer) GetLogisticsInfo(context.Context, *GetLogisticsInfoRequest) (*GetLogisticsInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogisticsInfo not implemented")
}
func (UnimplementedLogisticsServer) GetLogisticsTracks(context.Context, *GetLogisticsTracksRequest) (*GetLogisticsTracksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogisticsTracks not implemented")
}
func (UnimplementedLogisticsServer) UpdateLogisticsStatus(context.Context, *UpdateLogisticsStatusRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateLogisticsStatus not implemented")
}
func (UnimplementedLogisticsServer) SimulateShipment(context.Context, *SimulateShipmentRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateShipment not implemented")
}
func (UnimplementedLogisticsServer) SimulateDelivery(context.Context, *SimulateDeliveryRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimulateDelivery not implemented")
}
func (UnimplementedLogisticsServer) CalculateShippingFee(context.Context, *CalculateShippingFeeRequest) (*CalculateShippingFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateShippingFee not implemented")
}
func (UnimplementedLogisticsServer) GetLogisticsCompanies(context.Context, *emptypb.Empty) (*LogisticsCompaniesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogisticsCompanies not implemented")
}
func (UnimplementedLogisticsServer) GetCouriers(context.Context, *GetCouriersRequest) (*GetCouriersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCouriers not implemented")
}
func (UnimplementedLogisticsServer) mustEmbedUnimplementedLogisticsServer() {}
func (UnimplementedLogisticsServer) testEmbeddedByValue()                   {}

// UnsafeLogisticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogisticsServer will
// result in compilation errors.
type UnsafeLogisticsServer interface {
	mustEmbedUnimplementedLogisticsServer()
}

func RegisterLogisticsServer(s grpc.ServiceRegistrar, srv LogisticsServer) {
	// If the following call pancis, it indicates UnimplementedLogisticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Logistics_ServiceDesc, srv)
}

func _Logistics_CreateLogisticsOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogisticsOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).CreateLogisticsOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_CreateLogisticsOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).CreateLogisticsOrder(ctx, req.(*CreateLogisticsOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_GetLogisticsInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogisticsInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).GetLogisticsInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_GetLogisticsInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).GetLogisticsInfo(ctx, req.(*GetLogisticsInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_GetLogisticsTracks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogisticsTracksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).GetLogisticsTracks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_GetLogisticsTracks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).GetLogisticsTracks(ctx, req.(*GetLogisticsTracksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_UpdateLogisticsStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLogisticsStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).UpdateLogisticsStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_UpdateLogisticsStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).UpdateLogisticsStatus(ctx, req.(*UpdateLogisticsStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_SimulateShipment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateShipmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).SimulateShipment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_SimulateShipment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).SimulateShipment(ctx, req.(*SimulateShipmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_SimulateDelivery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimulateDeliveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).SimulateDelivery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_SimulateDelivery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).SimulateDelivery(ctx, req.(*SimulateDeliveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_CalculateShippingFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateShippingFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).CalculateShippingFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_CalculateShippingFee_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).CalculateShippingFee(ctx, req.(*CalculateShippingFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_GetLogisticsCompanies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).GetLogisticsCompanies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_GetLogisticsCompanies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).GetLogisticsCompanies(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Logistics_GetCouriers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCouriersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogisticsServer).GetCouriers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Logistics_GetCouriers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogisticsServer).GetCouriers(ctx, req.(*GetCouriersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Logistics_ServiceDesc is the grpc.ServiceDesc for Logistics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Logistics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Logistics",
	HandlerType: (*LogisticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogisticsOrder",
			Handler:    _Logistics_CreateLogisticsOrder_Handler,
		},
		{
			MethodName: "GetLogisticsInfo",
			Handler:    _Logistics_GetLogisticsInfo_Handler,
		},
		{
			MethodName: "GetLogisticsTracks",
			Handler:    _Logistics_GetLogisticsTracks_Handler,
		},
		{
			MethodName: "UpdateLogisticsStatus",
			Handler:    _Logistics_UpdateLogisticsStatus_Handler,
		},
		{
			MethodName: "SimulateShipment",
			Handler:    _Logistics_SimulateShipment_Handler,
		},
		{
			MethodName: "SimulateDelivery",
			Handler:    _Logistics_SimulateDelivery_Handler,
		},
		{
			MethodName: "CalculateShippingFee",
			Handler:    _Logistics_CalculateShippingFee_Handler,
		},
		{
			MethodName: "GetLogisticsCompanies",
			Handler:    _Logistics_GetLogisticsCompanies_Handler,
		},
		{
			MethodName: "GetCouriers",
			Handler:    _Logistics_GetCouriers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logistics.proto",
}
